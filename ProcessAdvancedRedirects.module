<?php

/**
 * ProcessAdvancedRedirects - a ProcessWire Module by Mike Anthony
 * Manage permanent and temporary redirects. Supports wildcards.
 *
 * Intended for: ProcessWire 2.6-dev
 * Developed in: ProcessWire 2.5.13
 *
 * Copyright (c) 2015, Mike Anthony. All Rights Reserved.
 * Licence: MIT License - http://mikeanthony.mit-license.org/
 *
 * http://pw.foundrybusiness.co.za/advanced-redirects
 *
 */

require_once __DIR__ . '/AdvancedRedirects.php';

use ProcessAdvancedRedirectsConfig as Config;

class ProcessAdvancedRedirects extends AdvancedRedirects {

	/**
	 * Determine if the tex/plain header is set
	 * @var boolean
	 */
	protected $headerSet = false;

	/**
	 * Object (Array) that holds SQL statements
	 * @var stClass
	 */
	protected $sql;

	/**
	 * Hold module information
	 * @var array
	 */
	protected $moduleInfo;

	/**
	 * The base table name
	 * @rfc Should we make this constant?
	 * @var string
	 */
	protected $tableName = 'process_advanced_redirects';

	/**
	 * Path to form (___executeEntity())
	 * @var string
	 */
	protected $formPath = 'entity/';

	/**
	 * Class constructor
	 * Init moduleInfo, sql
	 */
	public function __construct() {
		$this->moduleInfo = wire('modules')->getModuleInfo($this, array('verbose' => true));
		$this->sql = (object) array(
			'entitySelectAll' => "SELECT * FROM {$this->tableName} ORDER BY name",
			'entitySelectAllNav' => "SELECT * FROM {$this->tableName} ORDER BY updated_at DESC LIMIT 5",
			'entitySelectSingle' => "SELECT * FROM {$this->tableName} WHERE id=%s",
			'entitySelectIdFromName' => "SELECT id FROM {$this->tableName} WHERE name='%s'",
			'entityDropById' => "DELETE FROM {$this->tableName} WHERE id=%s",
			'entityInsert' => "INSERT INTO {$this->tableName} SET name = '%s', source = '%s', destination = '%s', date_start = %s, date_end = %s, user_created = %s, user_updated = %s ON DUPLICATE KEY UPDATE id = id",
			'entityUpdate' => "UPDATE {$this->tableName} SET name = '%s', source = '%s', destination = '%s', date_start = %s, date_end = %s, user_updated = %s WHERE id = %s",
			'mappingCollectionsSelectAll' => "SELECT * FROM {$this->tableName}_mc ORDER BY collection_name",
			'mappingCollectionsSelectSingle' => "SELECT * FROM {$this->tableName}_mc WHERE id=%s",
			'mappingCollectionsSelectIdFromName' => "SELECT id FROM {$this->tableName}_mc WHERE collection_name='%s'",
			'mappingCollectionsSelectAllFromName' => "SELECT * FROM {$this->tableName}_mc WHERE collection_name='%s'",
			'mappingCollectionsDropById' => "DELETE FROM {$this->tableName}_mc WHERE id=%s",
			'mappingCollectionsInsert' => "INSERT INTO {$this->tableName}_mc SET collection_name = '%s', collection_mappings = '%s', user_created = %s, user_updated = %s ON DUPLICATE KEY UPDATE id = id",
			'mappingCollectionsUpdate' => "UPDATE {$this->tableName}_mc SET collection_name = '%s', collection_mappings = '%s', user_updated = %s WHERE id = %s",
		);
	}

	/**
	 * Admin Page: Module Root
	 * @return string
	 */
	public function ___execute() {
		$redirects = $this->db->query($this->sql->entitySelectAll);
		$this->setFuel('processHeadline', $this->moduleInfo['title']);

		// If we don't have any redirects defined, then we should start be creating one
		if ($redirects->num_rows == 0) {
			$this->session->redirect("{$this->formPath}?first");
		}

		$tabContainer = new InputfieldWrapper();

		$redirectsTab = new InputfieldWrapper();
		$redirectsTab->attr('title', 'Redirects');

		$redirectsTable = $this->modules->get('MarkupAdminDataTable');
		$redirectsTable->setEncodeEntities(false);
		$redirectsTable->setClass('advanced-redirects redirects');
		$redirectsTable->setSortable(false);
		$redirectsTable->headerRow(array($this->_('Name'), $this->_('Source'), $this->_('Destination'), $this->_('Start'), $this->_('End')));
		$registerRedirectButtonLabel = ($redirects->num_rows === 1) ? $this->_('Register Another Redirect') : $this->_('Register New Redirect');
		$redirectsTable->action(array(
			$registerRedirectButtonLabel => "entity/",
			$this->_('Configuration') => $this->getModuleConfigUri(),
			//$this->_('Documentation') => $this->moduleInfo['href'],
			$this->_('Dev Discussion') => 'https://processwire.com/talk/topic/8697-alpha-processadvancedredirects/',
			$this->_('Issues on GitHub') => 'https://github.com/mike-anthony/ProcessAdvancedRedirects/issues',
			$this->_('Master Task List') => 'https://github.com/mike-anthony/ProcessAdvancedRedirects/issues/1',
		));

		$head = $this->_n('You have one redirect registered.', 'Your redirects are listed below.', $redirects->num_rows);
		$pronoun = $this->_n('it', 'one', $redirects->num_rows);
		$more = sprintf($this->_("To edit/delete %s, simply click on its name. To add another, click on '%s' at the bottom."), $pronoun, $registerRedirectButtonLabel);
		$description = $this->blueprint('manage-description', array(
			'head' => $head,
			'more' => $more,
		));

		$rowAssociations = array();

		while ($redirect = $redirects->fetch_object()) {
			$redirect->source = htmlentities($redirect->source);
			$redirect->destination = $this->compileDestinationUrl($redirect->destination, true);
			$relativeStartTime = str_replace('Never', '', wireRelativeTimeStr($redirect->date_start, true));
			$relativeEndTime = str_replace('Never', '', wireRelativeTimeStr($redirect->date_end, true));

			$relativeStartTime = ($relativeStartTime === '-')
			? $relativeStartTime
			: "<abbr title=\"{$redirect->date_start}\">{$relativeStartTime}</abbr>";
			$relativeEndTime = ($relativeEndTime === '-')
			? $relativeEndTime
			: "<abbr title=\"{$redirect->date_end}\">{$relativeEndTime}</abbr>";

			$redirectsTable->row(array(
				$redirect->name => "entity/?id={$redirect->id}",
				$this->truncate($redirect->source),
				$redirect->destination,
				$relativeStartTime,
				$relativeEndTime,
			));

			$rowAssociations[] = (int) $redirect->id;
		}

		$wordLinks = ($redirects->num_rows === 1) ? 'redirect' : 'redirects';
		$redirectsTable->footerRow(array("{$redirects->num_rows} {$wordLinks}", '', '', '', ''));

		$redirects->close();

		$redirectsTableContainer = $this->modules->get('InputfieldMarkup');
		$redirectsTableContainer->value = $description . $redirectsTable->render();

		$redirectsTab->append($redirectsTableContainer);

		$mappingCollectionsTab = new InputfieldWrapper();
		$mappingCollectionsTab->attr('title', 'Mapping Collections');
		$mappingCollectionsTab->id = 'mappingCollections';

		$mappingCollections = $this->db->query($this->sql->mappingCollectionsSelectAll);

		$mappingCollectionsTable = $this->modules->get('MarkupAdminDataTable');
		$mappingCollectionsTable->setEncodeEntities(false);
		$mappingCollectionsTable->setClass('advanced-redirects mapping-collections');
		$mappingCollectionsTable->setSortable(false);
		$mappingCollectionsTable->headerRow(array($this->_('Collection Name'), $this->_('Mappings'), $this->_('Created'), $this->_('Last Modified')));

		$installMappingCollectionButtonLabel = ($mappingCollections->num_rows === 1) ? $this->_('Install Another Mapping Collection') : $this->_('Install New Mapping Collection');
		$mappingCollectionsTable->action(array(
			$installMappingCollectionButtonLabel => "mapping-collection/",
			//$this->_("What's this?") => "{$this->moduleInfo['href']}/mapping-collections",
		));

		if ($mappingCollections->num_rows === 0) {
			$pronoun = 'one';
			$head = $this->_("You don't have any collections installed.");
		} else {
			$head = $this->_n('You have one collection installed.', 'Your collections are listed below.', $mappingCollections->num_rows);
			$pronoun = $this->_n('it', 'one', $mappingCollections->num_rows);
		}

		$more = ($mappingCollections->num_rows === 0) ? '' : sprintf($this->_("To edit/delete %s, simply click on its name. To add another, click on '%s' at the bottom."), $pronoun, $installMappingCollectionButtonLabel);
		$description = $this->blueprint('manage-description', array(
			'head' => $head,
			'more' => $more,
		));

		while ($mappingCollection = $mappingCollections->fetch_object()) {
			$userCreated = $this->users->get($mappingCollection->user_created)->name;
			$userUpdated = $this->users->get($mappingCollection->user_updated)->name;

			$created = wireRelativeTimeStr($mappingCollection->created_at) . " by {$userCreated}";
			$updated = wireRelativeTimeStr($mappingCollection->updated_at) . " by {$userUpdated}";

			if ($mappingCollection->created_at === $mappingCollection->updated_at) {
				$updated = '';
			}

			$mappingCollectionsTable->row(array(
				$mappingCollection->collection_name => "mapping-collection/?id={$mappingCollection->id}",
				count(explode(PHP_EOL, trim($mappingCollection->collection_mappings))),
				$created,
				$updated,
			));
		}

		$mappingCollectionsTableContainer = $this->modules->get('InputfieldMarkup');
		$mappingCollectionsTableContainer->value = $description . $mappingCollectionsTable->render();

		$mappingCollectionsTab->append($mappingCollectionsTableContainer);

		$variableIndexTab = new InputfieldWrapper();
		$variableIndexTab->attr('title', 'Variables');
		$variableIndexTab->id = 'variables';

		$variableIndexTableContainer = $this->modules->get('InputfieldMarkup');
		$variableIndexTableContainer->value = 'Variables not implemented yet.';

		$variableIndexTab->append($variableIndexTableContainer);

		$replacementsTab = new InputfieldWrapper();
		$replacementsTab->attr('title', 'JIT Replacements');
		$replacementsTab->id = 'replacements';

		$replacementsTableContainer = $this->modules->get('InputfieldMarkup');
		$replacementsTableContainer->value = 'JIT Replacements not implemented yet.';

		$replacementsTab->append($replacementsTableContainer);

		$historyTab = new InputfieldWrapper();
		$historyTab->attr('title', 'History');
		$historyTab->id = 'history';

		$historyTableContainer = $this->modules->get('InputfieldMarkup');
		$historyTableContainer->value = 'History not implemented yet.';

		$historyTab->append($historyTableContainer);

		$tabContainer
			->append($redirectsTab)
			->append($mappingCollectionsTab)
			->append($variableIndexTab)
			->append($replacementsTab)
			->append($historyTab);

		$this->config->js("parRowAssociations", (object) $rowAssociations);

		// Unfortunately, we have to wrap it in a form to prevent spacing underneath
		// the tabs. This goes hand in hand with a rule in the stylesheet
		return "<form id=\"parTabs\">{$tabContainer->render()}</form>";
	}

	/**
	 * Admin Page: Add/Edit Entity (Redirect)
	 * @return string
	 */
	public function ___executeEntity() {
		$this->setFuel('processHeadline', $this->_('Register New Redirect'));

		// Get the ID if we're editing
		$editingId = (isset($this->input->get->id)) ? $this->input->get->id : 0;

		if ($editingId) {
			// Fetch the details and list vars
			$result = $this->db->query(sprintf($this->sql->entitySelectSingle, $editingId));
			list($id, $redirectName, $sourcePath, $destinationPath,
				$userCreated, $userUpdated, $dateStart, $dateEnd,
				$createdAt, $updatedAt) = $result->fetch_array();

			$this->setFuel('processHeadline', $this->_("Editing Redirect: $redirectName"));

			// Format dates (times)
			$dateStart = ($dateStart != null) ? date('Y-m-d h:m A', strtotime($dateStart)) : null;
			$dateEnd = ($dateEnd != null) ? date('Y-m-d h:m A', strtotime($dateEnd)) : null;
		}

		// Check if this is or first redirect
		$message = '';
		if (isset($this->input->get->first)) {
			$message = $this->_("You don't have any redirects registered. Let's create a new one now.");
			$message = "<p class=\"description parInfo\">{$message}</p>";
			$this->setFuel('processHeadline', $this->_('Register First Redirect'));
		}

		// Prep the form
		$form = $this->modules->get('InputfieldForm');
		$form->id = 'parInputForm';
		$form->method = 'POST';
		$form->action = '../commit/';

		// ID field
		$field = $this->modules->get('InputfieldHidden');
		$form->add($this->buildField($field, array(
			'name' => 'id',
			'value' => $editingId,
		)));

		// Name field (with dynamic placeholders)
		$field = $this->modules->get('InputfieldText');
		$seasons = array($this->_('Winter'), $this->_('Spring'), $this->_('Summer'), $this->_('Autumn'), $this->_('Winter'));
		$thisSeason = $seasons[intval(date('m')) / 3];
		$exampleSuffixes = array($this->_('Promotion'), $this->_('Promo'), $this->_('Specials'), $this->_('Competition'));
		$exampleMigrations = array($this->_('Blog'), $this->_('Site'));
		shuffle($exampleSuffixes);
		$exampleSuffix = $exampleSuffixes[array_rand($exampleSuffixes)] . ' ' . date('Y');
		$exampleMigration = $exampleMigrations[array_rand($exampleMigrations)];
		$form->add($this->buildField($field, array(
			'name+id' => 'redirectName',
			'label' => $this->_('Redirect Name'),
			'description' => $this->_('Enter a name for this redirect, so that it can be identified easily. If you leave this out, a name will be created for you.'),
			'placeholder' => $this->_('Examples:') . " '{$thisSeason} {$exampleSuffix}' or '{$exampleMigration} " . $this->_("Migration") . "'",
			'collapsed' => Inputfield::collapsedNever,
			'value' => isset($redirectName) ? $redirectName : '',
		)));

		// Source Path field
		$field = $this->modules->get('InputfieldText');
		$form->add($this->buildField($field, array(
			'name+id' => 'sourcePath',
			'label' => $this->_('Source Path'),
			'description' => $this->_("Enter a path that's relative to the root of this installation, without the leading slash."),
			'notes' => sprintf($this->_('Learn how to use **[wildcards](%s/wildcards)**.'), $this->moduleInfo['href']),
			'placeholder' => $this->_('Examples:') . " 'example/', 'example', 'content/pages/{path}', 'page.php?name=example', 'list.aspx?category={category:segment}'",
			'required' => 1,
			'collapsed' => Inputfield::collapsedNever,
			'value' => isset($sourcePath) ? $sourcePath : '',
		)));

		// Destination Page field
		$field = $this->modules->get('InputfieldPageListSelect');
		$form->add($this->buildField($field, array(
			'name+id' => 'destinationPage',
			'label' => $this->_('Destination Page'),
			'notes' => $this->_("If you leave this out, be sure to enter a valid URI/URL below.\n**Note:** If you need to see the details of a page in another language, you'll need to [switch to that language first](../../../profile)."),
			'parent_id' => 0,
			'startLabel' => $this->_('Select Page'),
			'collapsed' => Inputfield::collapsedBlank,
		)));

		// Destination Path field
		$field = $this->modules->get('InputfieldURL');
		$form->add($this->buildField($field, array(
			'name+id' => 'destinationPath',
			'label' => $this->_('Destination Path'),
			'description' => $this->_('Enter a URI relative to the root of this installation, without the leading slash, or an absolute URL.'),
			'placeholder' => $this->_('Examples:') . " 'path/', '{path}/', 'category/{category}/', 'http://www.domain.com/{path}'",
			'notes' => $this->_("Here, you can also make use of **[variables](../variable-index/)**, if you'd like to import common data.\nIf you select a page from the Page Selector above, its identifier will be added here."),
			'required' => 1,
			'collapsed' => Inputfield::collapsedNever,
			'value' => isset($destinationPath) ? $destinationPath : '',
		)));

		// Timed Activation fieldset
		$fieldSet = $this->modules->get('InputfieldFieldset');
		$fieldSet->label = 'Timed Activation';
		$fieldSet->collapsed = Inputfield::collapsedYes;
		$fieldSet->description = $this->_("If you'd like this redirect to only function during a specific time-range, then select the start and end dates and times below.");
		$fieldSet->notes = $this->_("You don't have to specify both. If you only specify a start time , you're simply delaying activation. If you only specify an end time, then you're simply telling it when to stop.\nIf an End Date/Time is specified, a temporary redirect will be made (302 status code, as opposed to 301).");
		$fieldSet->showIf = 'lockRedirect=0';

		$datetimeFieldDefaults = array(
			'datepicker' => 1,
			'timeInputFormat' => 'h:m A',
			'yearRange' => '-0:+100',
			'collapsed' => Inputfield::collapsedNever,
			'columnWidth' => 50,
		);

		// Start field
		$field = $this->modules->get('InputfieldDatetime');
		$fieldSet->add($this->buildField($field, array_merge(array(
			'name' => 'dateStart',
			'label' => $this->_('Start Date/Time'),
			'value' => (isset($dateStart)) ? $dateStart : '',
		), $datetimeFieldDefaults)));

		// End field
		$field = $this->modules->get('InputfieldDatetime');
		$fieldSet->add($this->buildField($field, array_merge(array(
			'name' => 'dateEnd',
			'label' => $this->_('End Date/Time'),
			'value' => (isset($dateEnd)) ? $dateEnd : '',
		), $datetimeFieldDefaults)));

		$form->add($fieldSet);

		// If we're editing:
		if ($editingId > 0) {
			// Get and ddd info markup
			$field = $this->modules->get('InputfieldMarkup');
			$userCreated = $this->users->get($userCreated);
			$userUpdated = $this->users->get($userUpdated);
			$userUrl = wire('config')->urls->admin . 'access/users/edit/?id=';
			$relativeTimes = array(
				'created' => wireRelativeTimeStr($createdAt),
				'updated' => wireRelativeTimeStr($updatedAt),
			);
			$form->add($this->buildField($field, array(
				'id' => 'info',
				'label' => $this->_('Info'),
				'value' => $this->blueprint('entity-info', array(
					'user-created-name' => $userCreated->name,
					'user-updated-name' => $userUpdated->name,
					'user-created-url' => $userUrl . $userCreated->id,
					'user-updated-url' => $userUrl . $userUpdated->id,
					'created-at' => $createdAt,
					'created-at-relative' => $relativeTimes['created'],
					'updated-at' => $updatedAt,
					'updated-at-relative' => $relativeTimes['updated'],
				)),
			)));

			// Add Make Permanent button
			$field = $this->modules->get('InputfieldCheckbox');
			$form->add($this->buildField($field, array(
				'name' => 'lockRedirect',
				'label' => $this->_('Lock Redirect'),
				'icon' => 'lock',
				'description' => $this->_("To lock this redirect, preventing future changes/deletion, check the box below."),
				'label2' => $this->_('Lock this redirect now'),
				'notes' => $this->_("Once locked, redirects will be made with a 301 status coode.\n**Dev Note:** Not implemented yet. See [this issue](https://github.com/mike-anthony/ProcessAdvancedRedirects/issues/3) for more information."),
				'collapsed' => Inputfield::collapsedYes,
				'showIf' => 'dateStart="", dateEnd=""'
			)));

			// Add Delete button
			$field = $this->modules->get('InputfieldCheckbox');
			$form->add($this->buildField($field, array(
				'name' => 'delete',
				'label' => $this->_('Delete'),
				'icon' => 'times-circle',
				'description' => $this->_("If you'd like to delete this redirect, check the box below."),
				'label2' => $this->_('Delete this redirect'),
				'collapsed' => Inputfield::collapsedYes,
				'showIf' => 'isPermanent=0',
			)));
		}

		// Save/Update button
		$field = $this->modules->get('InputfieldButton');
		$form->add($this->buildField($field, array(
			'name+id' => 'saveRedirect',
			'value' => ($editingId) ? $this->_('Update & Return') : $this->_('Save & Return'),
			'icon' => 'save',
			'type' => 'submit',
		)));

		// Add script (should we move this to global JS?)
		$script = $this->blueprint('entity-scripts', array(
			'selector' => 'destinationPage',
			'path-input-field' => 'destinationPath',
			'save-button' => 'saveRedirect',
			'redirect-name' => 'redirectName',
			'source-path' => 'sourcePath',
			'destination-path' => 'destinationPath',
			'date-start' => 'dateStart',
			'date-end' => 'dateEnd',
		));

		// Return the rendered page
		return $message . $form->render() . $script;
	}

	/**
	 * Admin Route: Commit new redirect or update existing
	 */
	public function ___executeCommit() {
		// Just to be on the safe side...
		if ($this->input->post->id == null) {
			$this->session->redirect("../");
		}

		$input = $this->input->post;

		// Set the ID and check if we're updating
		$id = (int) $input->id;
		$isUpdating = ($id !== 0);

		// If we're updating, check if we should delete
		if ($isUpdating && $input->delete) {
			$this->db->query(sprintf($this->sql->entityDropById, $id));
			$this->message($this->_('Redirect deleted.'));
			$this->session->redirect("../");
		}

		// Escape Source and Destination (Sanitised) Paths
		$source = $this->db->escape_string($input->sourcePath);
		$destination = $this->db->escape_string($this->sanitizer->url($input->destinationPath));

		// Set a name if one wasn't given.
		// This isn't the best solution - anyone got any better ideas?
		// Or should we just remove this field altogether?
		$name = (empty($input->redirectName))
		? trim(ucwords(trim(str_replace('/', ' ', preg_replace('/\{.*\}/i', '', $source)), "/")))
		: $input->redirectName;

		// Then escape it
		$name = $this->db->escape_string($name);

		// Prepare dates (times) for database entry
		$start = empty($input->dateStart) ? 'null'
		: "'" . date('Y-m-d H:i:s', strtotime(str_replace('-', '/', $input->dateStart))) . "'";
		$end = empty($input->dateEnd) ? 'null'
		: "'" . date('Y-m-d H:i:s', strtotime(str_replace('-', '/', $input->dateEnd))) . "'";

		// Set the user creating/updating
		if (!$isUpdating) {
			$userCreated = $this->user->id;
		}

		$userUpdated = $this->user->id;

		// Insert/Update
		$this->db->query(($isUpdating)
			? sprintf($this->sql->entityUpdate, $name, $source, $destination, $start, $end, $userUpdated, $id)
			: sprintf($this->sql->entityInsert, $name, $source, $destination, $start, $end, $userCreated, $userUpdated)
		);

		$this->message(sprintf($this->_("Redirect '%s' saved."), $name));

		// Get the ID of the entity we just created/updated
		// And send it off to the admin page to highlight it in the table
		if (!$isUpdating) {
			$theEntity = $this->db->query(sprintf($this->sql->entitySelectIdFromName, $name));
			while ($redirect = $theEntity->fetch_object()) {
				$id = $redirect->id;
			}

			$theEntity->close();
		}
		$id = (string) $id;

		$this->session->redirect("../?id={$id}");
	}

	/**
	 * Admin Page: Install/Uninstall Mapping Collections
	 * @return string
	 */
	public function ___executeMappingCollection() {
		$this->setFuel('processHeadline', $this->_('Install New Mapping Collection'));

		// Get the ID if we're editing
		$editingId = (isset($this->input->get->id)) ? $this->input->get->id : 0;

		if ($editingId) {
			// Fetch the details and list vars
			$result = $this->db->query(sprintf($this->sql->mappingCollectionsSelectSingle, $editingId));
			list($id, $collectionName, $collectionData, $userCreated, $userUpdated, $createdAt, $updatedAt) = $result->fetch_array();

			$this->setFuel('processHeadline', $this->_("Editing Mapping Collection: $collectionName"));
		}

		// Prep the form
		$form = $this->modules->get('InputfieldForm');
		$form->id = 'parInputForm';
		$form->method = 'POST';
		$form->action = '../commit-mapping-collection/';

		// ID field
		$field = $this->modules->get('InputfieldHidden');
		$form->add($this->buildField($field, array(
			'name' => 'id',
			'value' => $editingId,
		)));

		// Mapping Name field
		$field = $this->modules->get('InputfieldText');
		$form->add($this->buildField($field, array(
			'name+id' => 'collectionName',
			'label' => $this->_('Name of Collection'),
			'notes' => $this->_('Only use alpha characters (a-z). Name will be sanitised upon submission. This name is the identifier to be used in mapping wildcards.'),
			'placeholder' => $this->_('Examples:') . " 'blogmigration' or 'magento'",
			'required' => 1,
			'collapsed' => Inputfield::collapsedNever,
			'value' => isset($collectionName) ? $collectionName : '',
		)));

		// Mapping Data field
		$field = $this->modules->get('InputfieldTextarea');
		$form->add($this->buildField($field, array(
			'name+id' => 'collectionData',
			'label' => $this->_('Collection Data'),
			'description' => $this->_('Enter each mapping for this collection, one per line, in the following format: key=value. You will more than likely make use of this feature if you are mapping IDs to URL-friendly names. To learn more about how this feature works, please read through the documentation.'),
			'notes' => sprintf($this->_("To make things easier, you'll probably want to export your data from your old platform/framework in this format.\n**Note:** All **values** will be cleaned according to the 'Clean Paths' setting in the [module's configuration](%s)."), $this->getModuleConfigUri()),
			'required' => 1,
			'rows' => 10,
			'collapsed' => Inputfield::collapsedNever,
			'value' => isset($collectionData) ? $collectionData : '',
		)));

		// If we're editing:
		if ($editingId > 0) {
			// Get and ddd info markup
			$field = $this->modules->get('InputfieldMarkup');
			$userCreated = $this->users->get($userCreated);
			$userUpdated = $this->users->get($userUpdated);
			$userUrl = wire('config')->urls->admin . 'access/users/edit/?id=';
			$relativeTimes = array(
				'created' => wireRelativeTimeStr($createdAt),
				'updated' => wireRelativeTimeStr($updatedAt),
			);
			$form->add($this->buildField($field, array(
				'id' => 'info',
				'label' => $this->_('Info'),
				'value' => $this->blueprint('entity-info', array(
					'user-created-name' => $userCreated->name,
					'user-updated-name' => $userUpdated->name,
					'user-created-url' => $userUrl . $userCreated->id,
					'user-updated-url' => $userUrl . $userUpdated->id,
					'created-at' => $createdAt,
					'created-at-relative' => $relativeTimes['created'],
					'updated-at' => $updatedAt,
					'updated-at-relative' => $relativeTimes['updated'],
				)),
			)));

			// Add Uninstall button
			$field = $this->modules->get('InputfieldCheckbox');
			$form->add($this->buildField($field, array(
				'name+id' => 'uninstallCollection',
				'label' => $this->_('Uninstall'),
				'icon' => 'times-circle',
				'description' => $this->_("If you'd like to uninstall this collection, check the box below."),
				'label2' => $this->_('Uninstall this collection'),
				'collapsed' => Inputfield::collapsedYes,
			)));
		}

		// Install/Update & Return button
		$field = $this->modules->get('InputfieldButton');
		$form->add($this->buildField($field, array(
			'name+id' => 'installMappingCollection',
			'value' => ($editingId) ? $this->_('Update & Return') : $this->_('Install & Return'),
			'icon' => 'save',
			'type' => 'submit',
		)));

		// Add script (should we move this to global JS?)
		$script = $this->blueprint('mapping-scripts', array(
			'mapping-name' => 'collectionName',
			'mapping-data' => 'collectionData',
			'save-button' => 'installMappingCollection',
		));

		// Return the rendered page
		return $form->render() . $script;
	}

	/**
	 * Admin Route: Commit new mapping collection or update existing
	 */
	public function ___executeCommitMappingCollection() {
		// Just to be on the safe side...
		if ($this->input->post->id == null) {
			$this->session->redirect("../");
		}

		$input = $this->input->post;

		// Set the ID and check if we're updating
		$id = (int) $input->id;
		$isUpdating = ($id !== 0);

		// If we're updating, check if we should delete
		if ($isUpdating && $input->uninstallCollection) {
			$this->db->query(sprintf($this->sql->mappingCollectionsDropById, $id));
			$this->message($this->_('Collection deleted.'));
			$this->session->redirect("../");
		}

		// Clean up name (alphas only)
		$collectionName = preg_replace('~[^a-z]~', '', strtolower($input->collectionName));

		// Fetch, trim, and explode the data for cleaning
		$collectionMappings = $input->collectionData;
		$mappings = explode(PHP_EOL, trim($collectionMappings));

		$compiledMappings = array();

		// Split up the key/value pairs and clean
		foreach ($mappings as $mapping) {
			$mapping = explode('=', $mapping);

			$cleanPath = $this->{Config::CLEAN_PATH};
			if ($cleanPath === 'fullClean' || $cleanPath === 'semiClean') {
				$mapping[1] = $this->cleanPath($mapping[1], ($cleanPath === 'fullClean') ? false : true);
			}

			$compiledMappings[trim($mapping[0])] = $mapping[1];
		}

		$dbInput = '';

		foreach ($compiledMappings as $key => $value) {
			$dbInput .= "$key=$value\n";
		}

		$dbInput = trim($dbInput);

		//var_dump($dbInput);die;

		// Set the user creating/updating
		if (!$isUpdating) {
			$userCreated = $this->user->id;
		}
		$userUpdated = $this->user->id;

		// Insert/Update
		$this->db->query(($isUpdating)
			? sprintf($this->sql->mappingCollectionsUpdate, $collectionName, $dbInput, $userUpdated, $id)
			: sprintf($this->sql->mappingCollectionsInsert, $collectionName, $dbInput, $userCreated, $userUpdated)
		);

		$this->message(sprintf($this->_("Mapping Collection '%s' saved."), $collectionName));

		$this->session->redirect("../");
	}

	/**
	 * Render JSON Nav list - last five edited entities
	 * @return string rendered JSON string
	 */
	public function ___executeNavJSON(array $options = array()) {
		$options['items'] = array();
		$redirects = $this->db->query($this->sql->entitySelectAllNav);

		while ($redirect = $redirects->fetch_object()) {
			$redirect->updated_at = wireRelativeTimeStr($redirect->updated_at, true);
			$options['items'][] = $redirect;
		}

		$options['itemLabel'] = 'name';
		$options['itemLabel2'] = 'updated_at';
		$options['edit'] = 'entity/?id={id}';
		$options['add'] = 'entity/';
		$options['addLabel'] = 'New Redirect';
		$options['sort'] = false;

		return parent::___executeNavJSON($options);
	}

	/**
	 * Install the module
	 */
	public function ___install() {
		// Install tables
		$schemas = array('main', 'logs', 'vi', 'pjr', 'mc');

		foreach ($schemas as $schema) {
			$this->db->query($this->blueprint("schema-create-{$schema}"));
		}

		parent::___install();
	}

	/**
	 * Uninstall the module
	 */
	public function ___uninstall() {
		// Uninstall tables
		$this->db->query($this->blueprint('schema-drop'));
		parent::___uninstall();
	}

}
